{"version":3,"sources":["components/Pet.js","components/Client.js","App.js","api/mockserver.js","index.js"],"names":["Pet","pet","Key","useState","setData","loading","setLoading","isVaccinated","petVacinated","setPetVaccinated","className","name","onClick","petname","postData","fetch","method","body","JSON","stringify","headers","then","response","json","resData","catch","error","console","log","finally","res","setVacination","Client","item","pets","map","i","toString","App","data","inputData","setInputData","value","onChange","el","target","disabled","length","adat","animal","environment","server","createServer","models","client","Model","seeds","routes","this","namespace","timing","get","schema","request","search","queryParams","filter","includes","post","parse","requestBody","forEach","c","p","success","makeServer","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b4842477.chunk.js","sourcesContent":["import React,{useState} from 'react'\r\n\r\nfunction Pet({pet,Key}) {\r\n\r\n\r\n    const[data,setData] = useState([]) // subscribe POST utani valasz.\r\n    const [loading, setLoading] = useState (false)\r\n    const [ petVacinated, setPetVaccinated] = useState(pet.isVaccinated)\r\n\r\nconst setVacination = (petname,isVaccinated) => {\r\n\r\n    \r\n            setLoading(true) \r\n\r\n            let postData = {\"name\" : petname, \"isVaccinated\" : isVaccinated }\r\n            fetch('api/pets/', {\r\n                    method: \"POST\",\r\n                    body: JSON.stringify(postData),\r\n                    headers: {\"Content-type\": \"application/json; charset=UTF-8\"}\r\n            })\r\n            .then( response => response.json() )\r\n            .then( resData => { //SetShowSubsribeResponse(true)\r\n                                setData(resData)\r\n                            })\r\n            .catch( error => {\r\n                    console.log('post error message', error)\r\n                    setData(null)\r\n            })\r\n            .finally( res => {setLoading(false); setPetVaccinated(true)})\r\n      }\r\n\r\n    return (\r\n        <div className=\"Pet\">\r\n            {pet.name} - Vaccinate :&nbsp; \r\n               { <button onClick={()=> setVacination(pet.name,true)}>  \r\n                   {loading \r\n                      ? '...'\r\n                      : petVacinated ? 'true':'false'\r\n                   }\r\n                </button>}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Pet\r\n","import React from 'react'\r\nimport Pet from './Pet.js'\r\n\r\nfunction Client({item, Key}) {\r\n    return (\r\n        <div className=\"Client\" >\r\n                {item.name}\r\n              {item.pets.map( (pet,i) => <Pet pet={pet} Key={i.toString()+pet.name } /> )\r\n}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Client\r\n","import React, {useState} from 'react'\r\nimport './App.css'\r\nimport Client from './components/Client.js'\r\n\r\nconst App = () => {\r\n\r\n  const [data,setData]= useState([]) // [{},{},{}]   null\r\n  const [ inputData,setInputData] = useState('')\r\n \r\n  const setShowResults = () =>{\r\n    fetch('api/clients/?search='+ inputData)\r\n    .then( response => response.json() )\r\n    .then( adat => setData(adat) )\r\n    .catch(error =>{\r\n                    console.log('error fetching data', error)\r\n                    setData(null)\r\n                  })\r\n   // .finally(respons => setLoading(false) )\r\n  \r\n   \r\n  \r\n  console.log('data=',data);\r\n  \r\n  }\r\n  return (<>\r\n    <div className=\"App\">\r\n        <h1> Veterinarian admin-clients</h1>\r\n \r\n         <input value={inputData} onChange={ (el) => setInputData(el.target.value)}/>\r\n         <button disabled={ inputData.length < 3 } onClick={ () => setShowResults()}>Search</button>\r\n         <hr />\r\n    </div>\r\n\r\n    {  \r\n       data.map( (item,i) => <Client item={item} Key={i.toString()} />   )\r\n    }\r\n    \r\n</>\r\n  )\r\n}\r\n\r\nexport default App\r\n","import { createServer, Model } from 'miragejs';\r\n\r\nlet data = [\r\n  {\r\n    name: 'Kovács Béla',\r\n    pets: [\r\n      { name: \"Bodri\", animal: \"dog\", isVaccinated: false },\r\n      { name: \"Cirmi\", animal: \"cat\", isVaccinated: false }\r\n    ]\r\n  },\r\n  {\r\n    name: 'Varga Lajos',\r\n    pets: [\r\n      { name: \"Frakk\", animal: \"dog\", isVaccinated: false }\r\n    ]\r\n  },\r\n  {\r\n    name: 'Nagy Béla',\r\n    pets: [\r\n      { name: \"Csőrike\", animal: \"pigeon\", isVaccinated: false }\r\n    ]\r\n  }\r\n]\r\n\r\nexport function makeServer({ environment = 'test' } = {}) {\r\n  let server = createServer({\r\n    environment,\r\n    models: {\r\n      client: Model,\r\n    },\r\n    seeds(server) { },\r\n    routes() {\r\n      this.namespace = '/api';\r\n      this.timing = 2000\r\n\r\n      this.get('clients', (schema, request) => {\r\n        const search = request.queryParams.search\r\n        return data.filter(client => client.name.includes(search))\r\n      });\r\n\r\n      this.post('/pets', (schema, request) => {\r\n        let { name, isVaccinated } = JSON.parse(request.requestBody);\r\n        data.forEach(c => {\r\n          c.pets.forEach(p => {\r\n            if (p.name === name) p.isVaccinated = isVaccinated\r\n          })\r\n        })\r\n        return { success: true }\r\n      });\r\n    },\r\n  });\r\n  return server;\r\n}\r\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport './index.css'\r\nimport App from './App'\r\n\r\nimport { makeServer } from './api/mockserver'\r\nmakeServer({ environment: 'development' })\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n)\r\n"],"sourceRoot":""}